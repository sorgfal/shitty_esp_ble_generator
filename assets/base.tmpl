#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>

#define SERVICE_UUID  "%serviceUUID"

#define DEVICE_MANUFACTURER "%manufacturer"  
#define DEVICE_NAME         "%deviceName" 
%constDefinition
%BLECharacteristic
%callbacksDefenition



class MyServerCallbacks: public BLEServerCallbacks {
    void onConnect(BLEServer* pServer) {
      // On external device connection handler
      Serial.println("Client Connected");
    };

    void onDisconnect(BLEServer* pServer) {
      // On external device disconnection handler
      Serial.println("Client Disconnected");
    }
};


void setup() {
  Serial.begin(115200);
  // device name generation
  String devName = DEVICE_NAME; 
  String chipId = String((uint32_t)(ESP.getEfuseMac() >> 24), HEX);
  devName += '_';
  devName += chipId;
 
   // BLEDevice connection initialization
  BLEDevice::init(devName.c_str()); 

  // Server creation
  BLEServer *pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks()); 

  // Service creation
   BLEService *pService = pServer->createService(BLEUUID(SERVICE_UUID), 110, 0);

  %characteristicAssignment

  


  // Broadcast setup
  BLEAdvertising *pAdvertising = pServer->getAdvertising();

  BLEAdvertisementData adv;
  adv.setName(devName.c_str());
  pAdvertising->setAdvertisementData(adv);

  BLEAdvertisementData adv2;
  adv2.setCompleteServices(BLEUUID(SERVICE_UUID));
  pAdvertising->setScanResponseData(adv2);
  
  // Service start
  pService->start();
  // Broadcast start
  pAdvertising->start();

}

void loop() {
  delay(1000);
}